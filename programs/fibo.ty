var arr: Int[100]


func fib_r(n: Int) -> Int {
  if (n <= 1) {
      return n
  }
  return fib_r(n - 1) + fib_r(n - 2)
}


func find(n: Int) -> Bool {
    var i: Int
    i = 0

    while(i < 100) {
        arr[i] = i
        i += 1
    }
    i = 0
    while (i < 100) {
        if (arr[i] == n) {
            return true
        }
        i += 1
    }

    return false
   
}

func fibo_array(n: Int) -> Int {
    if (n > 100) {
        print("n is too big")
        return -1
    }

    var arr: Int[101]
    var i: Int
    var result: Int

    i = 2
    arr[0] = 0
    arr[1] = 1

    while (i <= n) {
            arr[i] = arr[i - 1] + arr[i - 2]
            i += 1
    }

    result = arr[n]
    // release array from heap before returning
    return result

}
// test fact
func factorial_r(n: Int) -> Int {
    if (n == 0) {
        return 1
    }
    return n * factorial_r(n - 1)
}

func factorial_i(n: Int) -> Int {
    // show me the way
    var res: Int
    var i: Int
    i = 2
    res = 1
    while (i <= n) {
        res *= i
        i += 1
    }
    return res
}

func fib_i(n: Int) -> Int {
    print("iterative fibo (with temp var)")
    var curr: Int
    var prev: Int
    var temp: Int
    var count: Int

    count = 2
    curr = 1
    prev = 1

    if (n < 2) {
        return n
    }

    while (count < n) {
        temp = curr + prev
        prev = curr
        curr = temp
        count += 1
    }

    return curr
}

func main() -> {
    // test fib
    var recursive_factorial : Int
    var interative_factorial: Int
    var dynamic_p_array_fibo: Int
    var faster_iterative_fibo: Int
    var recursive_fibo: Int

    recursive_factorial = factorial_r(10)
    interative_factorial = factorial_i(10)

    recursive_fibo = fib_r(20)
    dynamic_p_array_fibo = fibo_array(20)
    faster_iterative_fibo = fib_i(20)

    print("recursive factorial")
    print(recursive_factorial)
    print("iterative factorial")
    print(interative_factorial)

    print("recursive fibo")
    print(recursive_fibo)
    print("dynamic p array fibo")
    print(dynamic_p_array_fibo)
    print("faster iterative fibo")
    print(faster_iterative_fibo)

    print(find(20))
    print(find(101))
}
